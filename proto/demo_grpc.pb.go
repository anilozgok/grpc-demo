// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: proto/demo.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	DemoService_UnaryCall_FullMethodName                  = "/demo.DemoService/UnaryCall"
	DemoService_ClientStreamingCall_FullMethodName        = "/demo.DemoService/ClientStreamingCall"
	DemoService_ServerStreamingCall_FullMethodName        = "/demo.DemoService/ServerStreamingCall"
	DemoService_BidirectionalStreamingCall_FullMethodName = "/demo.DemoService/BidirectionalStreamingCall"
)

// DemoServiceClient is the client API for DemoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DemoServiceClient interface {
	UnaryCall(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	ClientStreamingCall(ctx context.Context, opts ...grpc.CallOption) (DemoService_ClientStreamingCallClient, error)
	ServerStreamingCall(ctx context.Context, in *Request, opts ...grpc.CallOption) (DemoService_ServerStreamingCallClient, error)
	BidirectionalStreamingCall(ctx context.Context, opts ...grpc.CallOption) (DemoService_BidirectionalStreamingCallClient, error)
}

type demoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDemoServiceClient(cc grpc.ClientConnInterface) DemoServiceClient {
	return &demoServiceClient{cc}
}

func (c *demoServiceClient) UnaryCall(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, DemoService_UnaryCall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoServiceClient) ClientStreamingCall(ctx context.Context, opts ...grpc.CallOption) (DemoService_ClientStreamingCallClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DemoService_ServiceDesc.Streams[0], DemoService_ClientStreamingCall_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &demoServiceClientStreamingCallClient{ClientStream: stream}
	return x, nil
}

type DemoService_ClientStreamingCallClient interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type demoServiceClientStreamingCallClient struct {
	grpc.ClientStream
}

func (x *demoServiceClientStreamingCallClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *demoServiceClientStreamingCallClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *demoServiceClient) ServerStreamingCall(ctx context.Context, in *Request, opts ...grpc.CallOption) (DemoService_ServerStreamingCallClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DemoService_ServiceDesc.Streams[1], DemoService_ServerStreamingCall_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &demoServiceServerStreamingCallClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DemoService_ServerStreamingCallClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type demoServiceServerStreamingCallClient struct {
	grpc.ClientStream
}

func (x *demoServiceServerStreamingCallClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *demoServiceClient) BidirectionalStreamingCall(ctx context.Context, opts ...grpc.CallOption) (DemoService_BidirectionalStreamingCallClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DemoService_ServiceDesc.Streams[2], DemoService_BidirectionalStreamingCall_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &demoServiceBidirectionalStreamingCallClient{ClientStream: stream}
	return x, nil
}

type DemoService_BidirectionalStreamingCallClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type demoServiceBidirectionalStreamingCallClient struct {
	grpc.ClientStream
}

func (x *demoServiceBidirectionalStreamingCallClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *demoServiceBidirectionalStreamingCallClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DemoServiceServer is the server API for DemoService service.
// All implementations must embed UnimplementedDemoServiceServer
// for forward compatibility
type DemoServiceServer interface {
	UnaryCall(context.Context, *Request) (*Response, error)
	ClientStreamingCall(DemoService_ClientStreamingCallServer) error
	ServerStreamingCall(*Request, DemoService_ServerStreamingCallServer) error
	BidirectionalStreamingCall(DemoService_BidirectionalStreamingCallServer) error
	mustEmbedUnimplementedDemoServiceServer()
}

// UnimplementedDemoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDemoServiceServer struct {
}

func (UnimplementedDemoServiceServer) UnaryCall(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryCall not implemented")
}
func (UnimplementedDemoServiceServer) ClientStreamingCall(DemoService_ClientStreamingCallServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStreamingCall not implemented")
}
func (UnimplementedDemoServiceServer) ServerStreamingCall(*Request, DemoService_ServerStreamingCallServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStreamingCall not implemented")
}
func (UnimplementedDemoServiceServer) BidirectionalStreamingCall(DemoService_BidirectionalStreamingCallServer) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalStreamingCall not implemented")
}
func (UnimplementedDemoServiceServer) mustEmbedUnimplementedDemoServiceServer() {}

// UnsafeDemoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DemoServiceServer will
// result in compilation errors.
type UnsafeDemoServiceServer interface {
	mustEmbedUnimplementedDemoServiceServer()
}

func RegisterDemoServiceServer(s grpc.ServiceRegistrar, srv DemoServiceServer) {
	s.RegisterService(&DemoService_ServiceDesc, srv)
}

func _DemoService_UnaryCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServiceServer).UnaryCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DemoService_UnaryCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServiceServer).UnaryCall(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DemoService_ClientStreamingCall_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DemoServiceServer).ClientStreamingCall(&demoServiceClientStreamingCallServer{ServerStream: stream})
}

type DemoService_ClientStreamingCallServer interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type demoServiceClientStreamingCallServer struct {
	grpc.ServerStream
}

func (x *demoServiceClientStreamingCallServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *demoServiceClientStreamingCallServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DemoService_ServerStreamingCall_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DemoServiceServer).ServerStreamingCall(m, &demoServiceServerStreamingCallServer{ServerStream: stream})
}

type DemoService_ServerStreamingCallServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type demoServiceServerStreamingCallServer struct {
	grpc.ServerStream
}

func (x *demoServiceServerStreamingCallServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func _DemoService_BidirectionalStreamingCall_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DemoServiceServer).BidirectionalStreamingCall(&demoServiceBidirectionalStreamingCallServer{ServerStream: stream})
}

type DemoService_BidirectionalStreamingCallServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type demoServiceBidirectionalStreamingCallServer struct {
	grpc.ServerStream
}

func (x *demoServiceBidirectionalStreamingCallServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *demoServiceBidirectionalStreamingCallServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DemoService_ServiceDesc is the grpc.ServiceDesc for DemoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DemoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "demo.DemoService",
	HandlerType: (*DemoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnaryCall",
			Handler:    _DemoService_UnaryCall_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientStreamingCall",
			Handler:       _DemoService_ClientStreamingCall_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ServerStreamingCall",
			Handler:       _DemoService_ServerStreamingCall_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BidirectionalStreamingCall",
			Handler:       _DemoService_BidirectionalStreamingCall_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/demo.proto",
}
